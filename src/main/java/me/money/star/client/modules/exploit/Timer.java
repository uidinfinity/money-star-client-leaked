package me.money.star.client.modules.exploit;


import com.google.common.eventbus.Subscribe;
import me.money.star.MoneyStar;
import me.money.star.client.gui.modules.Module;
import me.money.star.client.modules.movement.Speed;
import me.money.star.client.settings.Setting;
import me.money.star.event.Stage;
import me.money.star.event.impl.TickEvent;
import me.money.star.event.impl.render.TickCounterEvent;

public class Timer extends Module {
    private static Timer INSTANCE;

    public Setting<Float> ticks = num("Ticks",1.0f,0.1f,50.0f);
    public Setting<Boolean> tpsSync = bool("TPS-Sync", true);
    private float prevTimer = -1.0f;
    private float timer = 1.0f;

    public Timer(){
        super("Timer","13.37 on clock",Category.EXPLOIT,true,false,false);
    }
    public static Timer getInstance()
    {
        if (INSTANCE == null)
        {
            INSTANCE = new Timer();
        }
        return INSTANCE;
    }



    @Override
    public void toggle()
    {
        Speed.getInstance().setPrevTimer();
        if (Speed.getInstance().isUsingTimer())
        {
            return;
        }
        super.toggle();
    }

    @Override
    public void onDisable()
    {
        MoneyStar.tickManager.setClientTick(1.0f);
    }

    @Subscribe
    public void onTick(TickEvent event)
    {
        if (event.getStage() == Stage.PRE)
        {
            if (Speed.getInstance().isUsingTimer())
            {
                return;
            }
            if (tpsSync.getValue())
            {
                timer = Math.max(MoneyStar.tickManager.getTpsCurrent() / 20.0f, 0.1f);
                return;
            }
            timer = ticks.getValue();
        }
    }

    @Subscribe
    public void onTickCounter(TickCounterEvent event)
    {
        if (timer != 1.0f)
        {
            event.cancel();
            event.setTicks(timer);
        }
    }

    /**
     * @return
     */
    public float getTimer()
    {
        return timer;
    }

    /**
     * @param timer
     */
    public void setTimer(float timer)
    {
        prevTimer = this.timer;
        this.timer = timer;
    }

    public void resetTimer()
    {
        if (prevTimer > 0.0f)
        {
            this.timer = prevTimer;
            prevTimer = -1.0f;
        }
    }
}
